{"ast":null,"code":"var _jsxFileName = \"D:\\\\Y3S2\\\\CS Research II\\\\FloodProject\\\\1 Webpage\\\\dashboard\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport fetchSheetData from './api/googleSheets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction Dashboard() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [prediction, setPrediction] = useState(''); // To store the prediction result\n  const [distance, setDistance] = useState(0.0); // To store latest Distance\n  const [flowRate, setFlowRate] = useState(0.0); // To store latest FlowRate\n\n  // ✅ Improved fetchData function to clean and prepare chart data\n  const fetchData = async () => {\n    const sheetData = await fetchSheetData();\n    console.log(\"Raw sheet data:\", sheetData); // Debugging: see raw data\n\n    if (sheetData && sheetData.length) {\n      // Filter out incomplete or invalid rows\n      const validRows = sheetData.filter(item => item.length >= 3 && !isNaN(parseFloat(item[1])) && !isNaN(parseFloat(item[2])));\n      console.log(\"Filtered valid rows:\", validRows); // Debugging: see cleaned rows\n\n      // Map data for chart\n      const labels = validRows.map(item => item[0]); // Dates\n      const distanceData = validRows.map(item => parseFloat(item[1])); // Distance\n      const flowrateData = validRows.map(item => parseFloat(item[2])); // Flowrate\n\n      console.log(\"Labels:\", labels);\n      console.log(\"Distance Data:\", distanceData);\n      console.log(\"Flowrate Data:\", flowrateData);\n      if (labels.length && distanceData.length && flowrateData.length) {\n        const newChartData = {\n          labels: labels,\n          datasets: [{\n            label: 'Distance',\n            data: distanceData,\n            fill: false,\n            borderColor: 'rgb(13, 96, 220)',\n            tension: 0.1\n          }, {\n            label: 'Flowrate',\n            data: flowrateData,\n            fill: false,\n            borderColor: 'rgb(254, 137, 4)',\n            tension: 0.1\n          }]\n        };\n        setChartData(newChartData); // ✅ Update chart data\n      } else {\n        console.log(\"No valid chart data available.\");\n        setChartData(null); // Reset chart if empty\n      }\n    } else {\n      console.log(\"No sheet data available.\");\n      setChartData(null); // Reset chart if empty\n    }\n  };\n\n  // Fetch prediction + latest sensor readings from FastAPI backend\n  const fetchPrediction = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/predict', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Prediction API response:\", data); // Debug prediction data\n\n      setPrediction(data.Prediction);\n      setDistance(data.Distance);\n      setFlowRate(data.FlowRate);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setPrediction('Error fetching prediction');\n    }\n  };\n\n  // On mount and every 5 seconds, fetch data and prediction\n  useEffect(() => {\n    fetchData(); // Fetch data on initial render\n    fetchPrediction(); // Fetch prediction on initial render\n\n    const intervalId = setInterval(() => {\n      fetchData(); // Fetch data every 5 seconds\n      fetchPrediction(); // Fetch prediction every 5 seconds\n    }, 5000);\n    return () => clearInterval(intervalId); // Clear interval when component unmounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: \"Flood Prediction Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      style: {\n        marginBottom: '40px'\n      },\n      children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Latest Sensor Readings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Distance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 12\n        }, this), \" \", distance, \" m\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Flow Rate:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 12\n        }, this), \" \", flowRate, \" m\\xB3/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: \"Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), prediction ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '20px',\n          fontWeight: 'bold'\n        },\n        children: [prediction === \"Flood Risk\" ? \"⚠️ \" : \"✅ \", \" \", prediction]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading prediction...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"zNV94jBIl5AFH+PsVgfwS7fvX5M=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","fetchSheetData","jsxDEV","_jsxDEV","register","Dashboard","_s","chartData","setChartData","prediction","setPrediction","distance","setDistance","flowRate","setFlowRate","fetchData","sheetData","console","log","length","validRows","filter","item","isNaN","parseFloat","labels","map","distanceData","flowrateData","newChartData","datasets","label","data","fill","borderColor","tension","fetchPrediction","response","fetch","method","headers","ok","Error","status","json","Prediction","Distance","FlowRate","error","intervalId","setInterval","clearInterval","className","style","padding","fontFamily","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","fontWeight","_c","$RefreshReg$"],"sources":["D:/Y3S2/CS Research II/FloodProject/1 Webpage/dashboard/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport fetchSheetData from './api/googleSheets';\r\n\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nfunction Dashboard() {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [prediction, setPrediction] = useState(''); // To store the prediction result\r\n  const [distance, setDistance] = useState(0.0);   // To store latest Distance\r\n  const [flowRate, setFlowRate] = useState(0.0);   // To store latest FlowRate\r\n\r\n  // ✅ Improved fetchData function to clean and prepare chart data\r\n  const fetchData = async () => {\r\n    const sheetData = await fetchSheetData();\r\n\r\n    console.log(\"Raw sheet data:\", sheetData); // Debugging: see raw data\r\n\r\n    if (sheetData && sheetData.length) {\r\n      // Filter out incomplete or invalid rows\r\n      const validRows = sheetData.filter(\r\n        (item) =>\r\n          item.length >= 3 && \r\n          !isNaN(parseFloat(item[1])) &&\r\n          !isNaN(parseFloat(item[2]))\r\n      );\r\n\r\n      console.log(\"Filtered valid rows:\", validRows); // Debugging: see cleaned rows\r\n\r\n      // Map data for chart\r\n      const labels = validRows.map((item) => item[0]); // Dates\r\n      const distanceData = validRows.map((item) => parseFloat(item[1])); // Distance\r\n      const flowrateData = validRows.map((item) => parseFloat(item[2])); // Flowrate\r\n\r\n      console.log(\"Labels:\", labels);\r\n      console.log(\"Distance Data:\", distanceData);\r\n      console.log(\"Flowrate Data:\", flowrateData);\r\n\r\n      if (labels.length && distanceData.length && flowrateData.length) {\r\n        const newChartData = {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Distance',\r\n              data: distanceData,\r\n              fill: false,\r\n              borderColor: 'rgb(13, 96, 220)',\r\n              tension: 0.1,\r\n            },\r\n            {\r\n              label: 'Flowrate',\r\n              data: flowrateData,\r\n              fill: false,\r\n              borderColor: 'rgb(254, 137, 4)',\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        };\r\n\r\n        setChartData(newChartData); // ✅ Update chart data\r\n      } else {\r\n        console.log(\"No valid chart data available.\");\r\n        setChartData(null); // Reset chart if empty\r\n      }\r\n    } else {\r\n      console.log(\"No sheet data available.\");\r\n      setChartData(null); // Reset chart if empty\r\n    }\r\n  };\r\n\r\n  // Fetch prediction + latest sensor readings from FastAPI backend\r\n  const fetchPrediction = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/predict', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Prediction API response:\", data); // Debug prediction data\r\n\r\n      setPrediction(data.Prediction);\r\n      setDistance(data.Distance);\r\n      setFlowRate(data.FlowRate);\r\n    } catch (error) {\r\n      console.error('Error fetching prediction:', error);\r\n      setPrediction('Error fetching prediction');\r\n    }\r\n  };\r\n\r\n  // On mount and every 5 seconds, fetch data and prediction\r\n  useEffect(() => {\r\n    fetchData(); // Fetch data on initial render\r\n    fetchPrediction(); // Fetch prediction on initial render\r\n\r\n    const intervalId = setInterval(() => {\r\n      fetchData(); // Fetch data every 5 seconds\r\n      fetchPrediction(); // Fetch prediction every 5 seconds\r\n    }, 5000);\r\n\r\n    return () => clearInterval(intervalId); // Clear interval when component unmounts\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboard-container\" style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\r\n      \r\n      <h2 style={{ marginBottom: '20px' }}>Flood Prediction Dashboard</h2>\r\n\r\n      <div className=\"graph-container\" style={{ marginBottom: '40px' }}>\r\n        {/* Graph */}\r\n        {chartData ? (\r\n          <Line data={chartData} />\r\n        ) : (\r\n          <p>Loading data...</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"content-container\" style={{ marginTop: '20px' }}>\r\n        {/* Sensor Readings and Prediction */}\r\n        <h3>Latest Sensor Readings</h3>\r\n        <p><strong>Distance:</strong> {distance} m</p>\r\n        <p><strong>Flow Rate:</strong> {flowRate} m³/s</p>\r\n\r\n        <h3 style={{ marginTop: '20px' }}>Prediction</h3>\r\n        {prediction ? (\r\n          <p style={{ fontSize: '20px', fontWeight: 'bold' }}>\r\n            {prediction === \"Flood Risk\" ? \"⚠️ \" : \"✅ \"} {prediction}\r\n          </p>\r\n        ) : (\r\n          <p>Loading prediction...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}