{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CSE_STUDENT\\\\Desktop\\\\New folder (6)\\\\dashboard\\\\src\\\\ExcelUpload.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExcelUpload({\n  setData\n}) {\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const binaryStr = event.target.result;\n        const workbook = XLSX.read(binaryStr, {\n          type: 'binary'\n        });\n        const sheetName = workbook.SheetNames[0]; // Get the first sheet\n        const sheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\n        setData(jsonData); // Pass data to parent component\n      };\n      reader.readAsBinaryString(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = ExcelUpload;\nexport default ExcelUpload;\nvar _c;\n$RefreshReg$(_c, \"ExcelUpload\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","ExcelUpload","setData","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","binaryStr","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","readAsBinaryString","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CSE_STUDENT/Desktop/New folder (6)/dashboard/src/ExcelUpload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\n\r\nfunction ExcelUpload({ setData }) {\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const binaryStr = event.target.result;\r\n        const workbook = XLSX.read(binaryStr, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0]; // Get the first sheet\r\n        const sheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(sheet);\r\n        setData(jsonData); // Pass data to parent component\r\n      };\r\n      reader.readAsBinaryString(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExcelUpload;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,WAAWA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAChC,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,MAAMC,SAAS,GAAGD,KAAK,CAACL,MAAM,CAACO,MAAM;QACrC,MAAMC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CAACH,SAAS,EAAE;UAAEI,IAAI,EAAE;QAAS,CAAC,CAAC;QACzD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;QACxC,MAAMI,QAAQ,GAAGvB,IAAI,CAACwB,KAAK,CAACC,aAAa,CAACJ,KAAK,CAAC;QAChDjB,OAAO,CAACmB,QAAQ,CAAC,CAAC,CAAC;MACrB,CAAC;MACDb,MAAM,CAACgB,kBAAkB,CAACnB,IAAI,CAAC;IACjC;EACF,CAAC;EAED,oBACEL,OAAA;IAAAyB,QAAA,eACEzB,OAAA;MAAOgB,IAAI,EAAC,MAAM;MAACU,MAAM,EAAC,aAAa;MAACC,QAAQ,EAAExB;IAAiB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV;AAACC,EAAA,GAtBQ/B,WAAW;AAwBpB,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}