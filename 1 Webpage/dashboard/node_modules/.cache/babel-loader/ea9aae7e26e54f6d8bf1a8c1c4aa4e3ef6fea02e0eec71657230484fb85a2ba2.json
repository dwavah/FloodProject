{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CSE_STUDENT\\\\Desktop\\\\New folder (6)\\\\dashboard\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport fetchSheetData from './api/googleSheets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const fetchData = async () => {\n    const sheetData = await fetchSheetData();\n    if (sheetData.length) {\n      const labels = sheetData.map(item => item[0]); // Assuming first column is Date or Time\n      const values = sheetData.map(item => parseFloat(item[1])); // Assuming second column is the sensor data\n\n      const newChartData = {\n        labels: labels,\n        datasets: [{\n          label: 'Sensor Data',\n          data: values,\n          fill: false,\n          borderColor: 'rgba(75,192,192,1)',\n          tension: 0.1\n        }]\n      };\n      setChartData(newChartData); // Update the chart data\n    }\n  };\n  useEffect(() => {\n    fetchData(); // Fetch on initial render\n\n    const intervalId = setInterval(fetchData, 5000); // Fetch data every 5 seconds\n\n    return () => clearInterval(intervalId); // Clear interval when component unmounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Other Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Additional data, charts, or widgets can be placed here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 6\n  }, this);\n}\n_s(Dashboard, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","fetchSheetData","jsxDEV","_jsxDEV","Dashboard","_s","chartData","setChartData","fetchData","sheetData","length","labels","map","item","values","parseFloat","newChartData","datasets","label","data","fill","borderColor","tension","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CSE_STUDENT/Desktop/New folder (6)/dashboard/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport fetchSheetData from './api/googleSheets';\r\n\r\nfunction Dashboard() {\r\n   const [chartData, setChartData] = useState(null);\r\n\r\n   const fetchData = async () => {\r\n     const sheetData = await fetchSheetData();\r\n\r\n     if (sheetData.length) {\r\n       const labels = sheetData.map((item) => item[0]); // Assuming first column is Date or Time\r\n       const values = sheetData.map((item) => parseFloat(item[1])); // Assuming second column is the sensor data\r\n       \r\n       const newChartData = {\r\n         labels: labels,\r\n         datasets: [\r\n           {\r\n             label: 'Sensor Data',\r\n             data: values,\r\n             fill: false,\r\n             borderColor: 'rgba(75,192,192,1)',\r\n             tension: 0.1,\r\n           },\r\n         ],\r\n       };\r\n\r\n       setChartData(newChartData); // Update the chart data\r\n     }\r\n   };\r\n\r\n   useEffect(() => {\r\n     fetchData(); // Fetch on initial render\r\n\r\n     const intervalId = setInterval(fetchData, 5000); // Fetch data every 5 seconds\r\n\r\n     return () => clearInterval(intervalId); // Clear interval when component unmounts\r\n   }, []);\r\n\r\n   return (\r\n     <div className=\"dashboard-container\">\r\n       <div className=\"graph-container\">\r\n         {/* Left side - Graph */}\r\n         {chartData ? (\r\n           <Line data={chartData} />\r\n         ) : (\r\n           <p>Loading data...</p>\r\n         )}\r\n       </div>\r\n\r\n       <div className=\"content-container\">\r\n         {/* Right side - Other content */}\r\n         <h2>Other Content</h2>\r\n         <p>Additional data, charts, or widgets can be placed here.</p>\r\n       </div>\r\n     </div>\r\n   );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,cAAc,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,SAAS,GAAG,MAAMR,cAAc,CAAC,CAAC;IAExC,IAAIQ,SAAS,CAACC,MAAM,EAAE;MACpB,MAAMC,MAAM,GAAGF,SAAS,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjD,MAAMC,MAAM,GAAGL,SAAS,CAACG,GAAG,CAAEC,IAAI,IAAKE,UAAU,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE7D,MAAMG,YAAY,GAAG;QACnBL,MAAM,EAAEA,MAAM;QACdM,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,aAAa;UACpBC,IAAI,EAAEL,MAAM;UACZM,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,oBAAoB;UACjCC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC;MAEDf,YAAY,CAACS,YAAY,CAAC,CAAC,CAAC;IAC9B;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdS,SAAS,CAAC,CAAC,CAAC,CAAC;;IAEb,MAAMe,UAAU,GAAGC,WAAW,CAAChB,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEjD,OAAO,MAAMiB,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAKuB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCxB,OAAA;MAAKuB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAE7BrB,SAAS,gBACRH,OAAA,CAACH,IAAI;QAACmB,IAAI,EAAEb;MAAU;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAEzB5B,OAAA;QAAAwB,QAAA,EAAG;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACtB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEN5B,OAAA;MAAKuB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAEhCxB,OAAA;QAAAwB,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB5B,OAAA;QAAAwB,QAAA,EAAG;MAAuD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEX;AAAC1B,EAAA,CArDQD,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAuDlB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}