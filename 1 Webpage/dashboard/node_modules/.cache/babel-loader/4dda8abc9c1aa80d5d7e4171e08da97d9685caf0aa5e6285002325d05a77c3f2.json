{"ast":null,"code":"var _jsxFileName = \"D:\\\\Y3S2\\\\CS Research II\\\\FloodProject\\\\1 Webpage\\\\dashboard\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport fetchSheetData from './api/googleSheets';\nimport styled from 'styled-components';\n\n// Register Chart.js modules\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// Styled Components\nconst Container = styled.div`\n  padding: 20px;\n  font-family: Arial, sans-serif;\n  max-width: 900px;\n  margin: auto;\n`;\n_c = Container;\nconst TitleText = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n`;\n_c2 = TitleText;\nconst Section = styled.div`\n  margin-bottom: 30px;\n`;\n_c3 = Section;\nconst Card = styled.div`\n  background-color: #f9f9f9;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n`;\n_c4 = Card;\nconst SensorItem = styled.p`\n  margin: 10px 0;\n  font-size: 16px;\n`;\n_c5 = SensorItem;\nconst PredictionText = styled.p`\n  font-size: 22px;\n  font-weight: bold;\n  margin: 15px 0;\n  color: ${props => props.isRisk ? '#e63946' : '#2a9d8f'};\n`;\n_c6 = PredictionText;\nconst Button = styled.button`\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  font-size: 16px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 10px;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n_c7 = Button;\nexport default function Dashboard() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [prediction, setPrediction] = useState(''); // Prediction result\n  const [distance, setDistance] = useState(0.0); // Latest Distance\n  const [flowRate, setFlowRate] = useState(0.0); // Latest FlowRate\n\n  // Fetch data from Google Sheets and prepare for the chart\n  const fetchData = async () => {\n    const sheetData = await fetchSheetData();\n    console.log(\"Raw sheet data:\", sheetData); // Debugging\n\n    if (sheetData && sheetData.length) {\n      const validRows = sheetData.filter(item => item.length >= 3 && !isNaN(parseFloat(item[1])) && !isNaN(parseFloat(item[2])));\n      console.log(\"Filtered valid rows:\", validRows);\n      const labels = validRows.map(item => item[0]);\n      const distanceData = validRows.map(item => parseFloat(item[1]));\n      const flowrateData = validRows.map(item => parseFloat(item[2]));\n      if (labels.length && distanceData.length && flowrateData.length) {\n        const newChartData = {\n          labels: labels,\n          datasets: [{\n            label: 'Distance',\n            data: distanceData,\n            fill: false,\n            borderColor: 'rgb(13, 96, 220)',\n            // Blue color for Distance\n            tension: 0.1\n          }, {\n            label: 'Flowrate',\n            data: flowrateData,\n            fill: false,\n            borderColor: 'rgb(254, 137, 4)',\n            // Orange color for FlowRate\n            tension: 0.1\n          }]\n        };\n        setChartData(newChartData);\n      } else {\n        console.log(\"No valid chart data available.\");\n        setChartData(null);\n      }\n    } else {\n      console.log(\"No sheet data available.\");\n      setChartData(null);\n    }\n  };\n\n  // Fetch prediction + latest sensor readings from FastAPI backend\n  const fetchPrediction = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/predict', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      console.log(\"Prediction API response:\", data);\n      setPrediction(data.Prediction);\n      setDistance(data.Distance);\n      setFlowRate(data.FlowRate);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setPrediction('Error fetching prediction');\n    }\n  };\n\n  // On mount fetch data and prediction\n  useEffect(() => {\n    fetchData();\n    fetchPrediction();\n\n    // ✅ OPTIONAL: Uncomment this block to enable auto-refresh every 10 seconds\n    const intervalId = setInterval(() => {\n      fetchData();\n      fetchPrediction();\n    }, 10000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Handler to refresh both data and prediction\n  const handleRefresh = () => {\n    fetchData();\n    fetchPrediction();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(TitleText, {\n      children: \"Flood  Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Latest Sensor Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SensorItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Distance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 23\n          }, this), \" \", distance, \" m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SensorItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Flow Rate:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 23\n          }, this), \" \", flowRate, \" m\\xB3/s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRefresh,\n          children: \"Refresh Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), prediction ? /*#__PURE__*/_jsxDEV(PredictionText, {\n          isRisk: prediction === \"Flood Risk\",\n          children: [prediction === \"Flood Risk\" ? \"⚠️ \" : \"✅ \", \" \", prediction]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading prediction...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"zNV94jBIl5AFH+PsVgfwS7fvX5M=\");\n_c8 = Dashboard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"TitleText\");\n$RefreshReg$(_c3, \"Section\");\n$RefreshReg$(_c4, \"Card\");\n$RefreshReg$(_c5, \"SensorItem\");\n$RefreshReg$(_c6, \"PredictionText\");\n$RefreshReg$(_c7, \"Button\");\n$RefreshReg$(_c8, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","fetchSheetData","styled","jsxDEV","_jsxDEV","register","Container","div","_c","TitleText","h2","_c2","Section","_c3","Card","_c4","SensorItem","p","_c5","PredictionText","props","isRisk","_c6","Button","button","_c7","Dashboard","_s","chartData","setChartData","prediction","setPrediction","distance","setDistance","flowRate","setFlowRate","fetchData","sheetData","console","log","length","validRows","filter","item","isNaN","parseFloat","labels","map","distanceData","flowrateData","newChartData","datasets","label","data","fill","borderColor","tension","fetchPrediction","response","fetch","method","headers","ok","Error","status","json","Prediction","Distance","FlowRate","error","intervalId","setInterval","clearInterval","handleRefresh","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c8","$RefreshReg$"],"sources":["D:/Y3S2/CS Research II/FloodProject/1 Webpage/dashboard/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport fetchSheetData from './api/googleSheets';\r\nimport styled from 'styled-components';\r\n\r\n// Register Chart.js modules\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n// Styled Components\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n  font-family: Arial, sans-serif;\r\n  max-width: 900px;\r\n  margin: auto;\r\n`;\r\n\r\nconst TitleText = styled.h2`\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Section = styled.div`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst SensorItem = styled.p`\r\n  margin: 10px 0;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst PredictionText = styled.p`\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  margin: 15px 0;\r\n  color: ${(props) => (props.isRisk ? '#e63946' : '#2a9d8f')};\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background-color: #007bff;\r\n  color: white;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n`;\r\n\r\nexport default function Dashboard() {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [prediction, setPrediction] = useState(''); // Prediction result\r\n  const [distance, setDistance] = useState(0.0);   // Latest Distance\r\n  const [flowRate, setFlowRate] = useState(0.0);   // Latest FlowRate\r\n\r\n  // Fetch data from Google Sheets and prepare for the chart\r\n  const fetchData = async () => {\r\n    const sheetData = await fetchSheetData();\r\n\r\n    console.log(\"Raw sheet data:\", sheetData); // Debugging\r\n\r\n    if (sheetData && sheetData.length) {\r\n      const validRows = sheetData.filter(\r\n        (item) =>\r\n          item.length >= 3 &&\r\n          !isNaN(parseFloat(item[1])) &&\r\n          !isNaN(parseFloat(item[2]))\r\n      );\r\n\r\n      console.log(\"Filtered valid rows:\", validRows);\r\n\r\n      const labels = validRows.map((item) => item[0]);\r\n      const distanceData = validRows.map((item) => parseFloat(item[1]));\r\n      const flowrateData = validRows.map((item) => parseFloat(item[2]));\r\n\r\n      if (labels.length && distanceData.length && flowrateData.length) {\r\n        const newChartData = {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Distance',\r\n              data: distanceData,\r\n              fill: false,\r\n              borderColor: 'rgb(13, 96, 220)', // Blue color for Distance\r\n              tension: 0.1,\r\n            },\r\n            {\r\n              label: 'Flowrate',\r\n              data: flowrateData,\r\n              fill: false,\r\n              borderColor: 'rgb(254, 137, 4)', // Orange color for FlowRate\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        };\r\n        setChartData(newChartData);\r\n      } else {\r\n        console.log(\"No valid chart data available.\");\r\n        setChartData(null);\r\n      }\r\n    } else {\r\n      console.log(\"No sheet data available.\");\r\n      setChartData(null);\r\n    }\r\n  };\r\n\r\n  // Fetch prediction + latest sensor readings from FastAPI backend\r\n  const fetchPrediction = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/predict', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n\r\n      const data = await response.json();\r\n      console.log(\"Prediction API response:\", data);\r\n\r\n      setPrediction(data.Prediction);\r\n      setDistance(data.Distance);\r\n      setFlowRate(data.FlowRate);\r\n    } catch (error) {\r\n      console.error('Error fetching prediction:', error);\r\n      setPrediction('Error fetching prediction');\r\n    }\r\n  };\r\n\r\n  // On mount fetch data and prediction\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchPrediction();\r\n\r\n    // ✅ OPTIONAL: Uncomment this block to enable auto-refresh every 10 seconds\r\n     const intervalId = setInterval(() => {\r\n       fetchData();\r\n       fetchPrediction();\r\n     }, 10000);\r\n     return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // Handler to refresh both data and prediction\r\n  const handleRefresh = () => {\r\n    fetchData();\r\n    fetchPrediction();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <TitleText>Flood  Dashboard</TitleText>\r\n\r\n      <Section>\r\n        {/* Graph Section */}\r\n        {chartData ? (\r\n          <Line data={chartData} />\r\n        ) : (\r\n          <p>Loading data...</p>\r\n        )}\r\n      </Section>\r\n\r\n      <Section>\r\n        {/* Sensor Readings Card */}\r\n        <Card>\r\n          <h3>Latest Sensor Readings</h3>\r\n          <SensorItem><strong>Distance:</strong> {distance} m</SensorItem>\r\n          <SensorItem><strong>Flow Rate:</strong> {flowRate} m³/s</SensorItem>\r\n          <Button onClick={handleRefresh}>Refresh Data</Button>\r\n        </Card>\r\n\r\n        {/* Prediction Card */}\r\n        <Card>\r\n          <h3>Prediction</h3>\r\n          {prediction ? (\r\n            <PredictionText isRisk={prediction === \"Flood Risk\"}>\r\n              {prediction === \"Flood Risk\" ? \"⚠️ \" : \"✅ \"} {prediction}\r\n            </PredictionText>\r\n          ) : (\r\n            <p>Loading prediction...</p>\r\n          )}\r\n        </Card>\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}