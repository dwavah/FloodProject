{"ast":null,"code":"var _jsxFileName = \"D:\\\\Y3S2\\\\CS Research II\\\\FloodProject\\\\1 Webpage\\\\dashboard\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport fetchSheetData from './api/googleSheets';\nimport './Dashboard.css'; // Make sure your CSS matches the updated sections\n\n// Register Chart.js modules\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Dashboard() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [prediction, setPrediction] = useState('');\n  const [distance, setDistance] = useState(0.0);\n  const [flowRate, setFlowRate] = useState(0.0);\n  const [recentReadings, setRecentReadings] = useState([]); // Stores last 10 readings\n  const [summaryStats, setSummaryStats] = useState({\n    avgDist: 0,\n    maxFlow: 0,\n    minFlow: 0\n  });\n\n  // ✅ Fetch ALL readings from Google Sheets\n  const fetchData = async () => {\n    const sheetData = await fetchSheetData();\n    console.log(\"Raw sheet data:\", sheetData);\n    if (sheetData && sheetData.length) {\n      const validRows = sheetData.filter(item => item.length >= 2 && !isNaN(parseFloat(item[0])) &&\n      // Distance\n      !isNaN(parseFloat(item[1])) // FlowRate\n      );\n\n      // Prepare chart data\n      const labels = validRows.map((_, index) => `Reading ${index + 1}`);\n      const distanceData = validRows.map(item => parseFloat(item[0]));\n      const flowrateData = validRows.map(item => parseFloat(item[1]));\n      setChartData({\n        labels: labels,\n        datasets: [{\n          label: 'Distance (m)',\n          data: distanceData,\n          borderColor: '#4dabf7',\n          tension: 0.3\n        }, {\n          label: 'Flowrate (m³/s)',\n          data: flowrateData,\n          borderColor: '#ffa94d',\n          tension: 0.3\n        }]\n      });\n\n      // Store last 10 readings for the table\n      setRecentReadings(validRows.slice(-10).reverse());\n\n      // Calculate summary statistics\n      const avgDist = (distanceData.reduce((a, b) => a + b, 0) / distanceData.length).toFixed(2);\n      const maxFlow = Math.max(...flowrateData).toFixed(2);\n      const minFlow = Math.min(...flowrateData).toFixed(2);\n      setSummaryStats({\n        avgDist,\n        maxFlow,\n        minFlow\n      });\n    } else {\n      setChartData(null);\n      setRecentReadings([]);\n    }\n  };\n\n  // ✅ Fetch Prediction from Backend\n  const fetchPrediction = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/predict');\n      const data = await response.json();\n      setPrediction(data.Prediction);\n      setDistance(data.Distance);\n      setFlowRate(data.FlowRate);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setPrediction('Error fetching prediction');\n    }\n  };\n\n  // ✅ Chart.js options for dark mode (removing vertical lines)\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        labels: {\n          color: '#E0E0E0'\n        }\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          color: '#E0E0E0'\n        },\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        ticks: {\n          color: '#E0E0E0'\n        },\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        }\n      }\n    }\n  };\n\n  // ✅ Generate Alert Messages\n  const getAlertMessage = () => {\n    if (prediction === 'Flood Risk' || flowRate > 0.8) {\n      return {\n        text: '⚠️ Flood Risk Detected! Initiate emergency protocol.',\n        color: '#e63946'\n      };\n    }\n    return {\n      text: '✅ All conditions normal. No action required.',\n      color: '#2a9d8f'\n    };\n  };\n  useEffect(() => {\n    fetchData();\n    fetchPrediction();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px',\n        color: '#FFFFFF'\n      },\n      children: \"Flood Prediction Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-container\",\n        children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#E0E0E0'\n          },\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 75\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Latest Sensor Readings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Distance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 16\n            }, this), \" \", distance, \" m\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Flow Rate:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 16\n            }, this), \" \", flowRate, \" m\\xB3/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchData,\n            children: \"Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Prediction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 'bold',\n              fontSize: '20px',\n              color: prediction === 'Flood Risk' ? '#e63946' : '#2a9d8f'\n            },\n            children: [prediction === 'Flood Risk' ? '⚠️ ' : '✅ ', \" \", prediction]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card full-width\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Recent Sensor Readings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Timestamp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Distance (m)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Flow Rate (m\\xB3/s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: recentReadings.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: `Reading ${index + 1}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card full-width\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCCA Summary of Last 50 Readings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Average Distance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 12\n        }, this), \" \", summaryStats.avgDist, \" m\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Max Flow Rate:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 12\n        }, this), \" \", summaryStats.maxFlow, \" m\\xB3/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Min Flow Rate:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 12\n        }, this), \" \", summaryStats.minFlow, \" m\\xB3/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card full-width\",\n      style: {\n        backgroundColor: getAlertMessage().color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDEA8 Alerts & Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '18px',\n          color: '#FFF'\n        },\n        children: getAlertMessage().text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"RjvdjrfzwsqWObD5SKbsbMFkUsE=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","fetchSheetData","jsxDEV","_jsxDEV","register","Dashboard","_s","chartData","setChartData","prediction","setPrediction","distance","setDistance","flowRate","setFlowRate","recentReadings","setRecentReadings","summaryStats","setSummaryStats","avgDist","maxFlow","minFlow","fetchData","sheetData","console","log","length","validRows","filter","item","isNaN","parseFloat","labels","map","_","index","distanceData","flowrateData","datasets","label","data","borderColor","tension","slice","reverse","reduce","a","b","toFixed","Math","max","min","fetchPrediction","response","fetch","json","Prediction","Distance","FlowRate","error","chartOptions","responsive","plugins","legend","color","scales","x","ticks","grid","display","y","getAlertMessage","text","children","style","textAlign","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","className","options","onClick","fontWeight","fontSize","row","backgroundColor","_c","$RefreshReg$"],"sources":["D:/Y3S2/CS Research II/FloodProject/1 Webpage/dashboard/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport fetchSheetData from './api/googleSheets';\r\nimport './Dashboard.css'; // Make sure your CSS matches the updated sections\r\n\r\n// Register Chart.js modules\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nexport default function Dashboard() {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [prediction, setPrediction] = useState('');\r\n  const [distance, setDistance] = useState(0.0);\r\n  const [flowRate, setFlowRate] = useState(0.0);\r\n  const [recentReadings, setRecentReadings] = useState([]); // Stores last 10 readings\r\n  const [summaryStats, setSummaryStats] = useState({ avgDist: 0, maxFlow: 0, minFlow: 0 });\r\n\r\n  // ✅ Fetch ALL readings from Google Sheets\r\n  const fetchData = async () => {\r\n    const sheetData = await fetchSheetData();\r\n    console.log(\"Raw sheet data:\", sheetData);\r\n\r\n    if (sheetData && sheetData.length) {\r\n      const validRows = sheetData.filter(\r\n        (item) =>\r\n          item.length >= 2 &&\r\n          !isNaN(parseFloat(item[0])) && // Distance\r\n          !isNaN(parseFloat(item[1]))   // FlowRate\r\n      );\r\n\r\n      // Prepare chart data\r\n      const labels = validRows.map((_, index) => `Reading ${index + 1}`);\r\n      const distanceData = validRows.map((item) => parseFloat(item[0]));\r\n      const flowrateData = validRows.map((item) => parseFloat(item[1]));\r\n\r\n      setChartData({\r\n        labels: labels,\r\n        datasets: [\r\n          { label: 'Distance (m)', data: distanceData, borderColor: '#4dabf7', tension: 0.3 },\r\n          { label: 'Flowrate (m³/s)', data: flowrateData, borderColor: '#ffa94d', tension: 0.3 },\r\n        ],\r\n      });\r\n\r\n      // Store last 10 readings for the table\r\n      setRecentReadings(validRows.slice(-10).reverse());\r\n\r\n      // Calculate summary statistics\r\n      const avgDist = (distanceData.reduce((a, b) => a + b, 0) / distanceData.length).toFixed(2);\r\n      const maxFlow = Math.max(...flowrateData).toFixed(2);\r\n      const minFlow = Math.min(...flowrateData).toFixed(2);\r\n\r\n      setSummaryStats({ avgDist, maxFlow, minFlow });\r\n    } else {\r\n      setChartData(null);\r\n      setRecentReadings([]);\r\n    }\r\n  };\r\n\r\n  // ✅ Fetch Prediction from Backend\r\n  const fetchPrediction = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/predict');\r\n      const data = await response.json();\r\n      setPrediction(data.Prediction);\r\n      setDistance(data.Distance);\r\n      setFlowRate(data.FlowRate);\r\n    } catch (error) {\r\n      console.error('Error fetching prediction:', error);\r\n      setPrediction('Error fetching prediction');\r\n    }\r\n  };\r\n\r\n  // ✅ Chart.js options for dark mode (removing vertical lines)\r\n  const chartOptions = {\r\n    responsive: true,\r\n    plugins: { legend: { labels: { color: '#E0E0E0' } } },\r\n    scales: {\r\n      x: { ticks: { color: '#E0E0E0' }, grid: { display: false } },\r\n      y: { ticks: { color: '#E0E0E0' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } }\r\n    }\r\n  };\r\n\r\n  // ✅ Generate Alert Messages\r\n  const getAlertMessage = () => {\r\n    if (prediction === 'Flood Risk' || flowRate > 0.8) {\r\n      return { text: '⚠️ Flood Risk Detected! Initiate emergency protocol.', color: '#e63946' };\r\n    }\r\n    return { text: '✅ All conditions normal. No action required.', color: '#2a9d8f' };\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchPrediction();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: 'center', marginTop: '20px', color: '#FFFFFF' }}>Flood Prediction Dashboard</h2>\r\n\r\n      {/* Main Dashboard Layout */}\r\n      <div className=\"dashboard-container\">\r\n        {/* Left Side - Graph */}\r\n        <div className=\"graph-container\">\r\n          {chartData ? <Line data={chartData} options={chartOptions} /> : <p style={{ color: '#E0E0E0' }}>Loading data...</p>}\r\n        </div>\r\n\r\n        {/* Right Side - Readings & Prediction */}\r\n        <div className=\"content-container\">\r\n          <div className=\"card\">\r\n            <h3>Latest Sensor Readings</h3>\r\n            <p><strong>Distance:</strong> {distance} m</p>\r\n            <p><strong>Flow Rate:</strong> {flowRate} m³/s</p>\r\n            <button onClick={fetchData}>Refresh Data</button>\r\n          </div>\r\n\r\n          <div className=\"card\">\r\n            <h3>Prediction</h3>\r\n            <p style={{ fontWeight: 'bold', fontSize: '20px', color: prediction === 'Flood Risk' ? '#e63946' : '#2a9d8f' }}>\r\n              {prediction === 'Flood Risk' ? '⚠️ ' : '✅ '} {prediction}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 📈 Recent Readings Table */}\r\n      <div className=\"card full-width\">\r\n        <h3>📊 Recent Sensor Readings</h3>\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Timestamp</th>\r\n                <th>Distance (m)</th>\r\n                <th>Flow Rate (m³/s)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {recentReadings.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td>{`Reading ${index + 1}`}</td>\r\n                  <td>{row[0]}</td>\r\n                  <td>{row[1]}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 📊 Summary Stats */}\r\n      <div className=\"card full-width\">\r\n        <h3>📊 Summary of Last 50 Readings</h3>\r\n        <p><strong>Average Distance:</strong> {summaryStats.avgDist} m</p>\r\n        <p><strong>Max Flow Rate:</strong> {summaryStats.maxFlow} m³/s</p>\r\n        <p><strong>Min Flow Rate:</strong> {summaryStats.minFlow} m³/s</p>\r\n      </div>\r\n\r\n      {/* 🚨 Alerts & Recommendations */}\r\n      <div className=\"card full-width\" style={{ backgroundColor: getAlertMessage().color }}>\r\n        <h3>🚨 Alerts & Recommendations</h3>\r\n        <p style={{ fontWeight: 'bold', fontSize: '18px', color: '#FFF' }}>{getAlertMessage().text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}