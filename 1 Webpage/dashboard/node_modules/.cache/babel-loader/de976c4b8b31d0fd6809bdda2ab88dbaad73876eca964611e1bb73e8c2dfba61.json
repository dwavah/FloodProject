{"ast":null,"code":"var _jsxFileName = \"D:\\\\Y3S2\\\\CS Research II\\\\FloodProject\\\\1 Webpage\\\\dashboard\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport fetchSheetData from './api/googleSheets';\nimport './Dashboard.css'; // Link to your CSS layout file\n\n// Register Chart.js modules\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function Dashboard() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [prediction, setPrediction] = useState('');\n  const [distance, setDistance] = useState(0.0);\n  const [flowRate, setFlowRate] = useState(0.0);\n\n  // ✅ Fetch ALL readings from Google Sheets for the chart\n  const fetchData = async () => {\n    const sheetData = await fetchSheetData();\n    console.log(\"Raw sheet data:\", sheetData); // Debug\n\n    if (sheetData && sheetData.length) {\n      // Filter valid rows\n      const validRows = sheetData.filter(item => item.length >= 2 && !isNaN(parseFloat(item[0])) &&\n      // Distance\n      !isNaN(parseFloat(item[1])) // FlowRate\n      );\n      console.log(\"Filtered valid rows:\", validRows);\n\n      // X-axis as Reading numbers\n      const labels = validRows.map((_, index) => `Reading ${index + 1}`);\n      const distanceData = validRows.map(item => parseFloat(item[0]));\n      const flowrateData = validRows.map(item => parseFloat(item[1]));\n      const newChartData = {\n        labels: labels,\n        datasets: [{\n          label: 'Distance (m)',\n          data: distanceData,\n          borderColor: 'rgb(13, 96, 220)',\n          // Blue\n          tension: 0.3\n        }, {\n          label: 'Flowrate (m³/s)',\n          data: flowrateData,\n          borderColor: 'rgb(254, 137, 4)',\n          // Orange\n          tension: 0.3\n        }]\n      };\n      setChartData(newChartData);\n    } else {\n      console.log(\"No sheet data available.\");\n      setChartData(null);\n    }\n  };\n\n  // Fetch prediction from backend\n  const fetchPrediction = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/predict');\n      const data = await response.json();\n      console.log(\"Prediction:\", data);\n      setPrediction(data.Prediction);\n      setDistance(data.Distance);\n      setFlowRate(data.FlowRate);\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      setPrediction('Error fetching prediction');\n    }\n  };\n\n  // Fetch on mount\n  useEffect(() => {\n    fetchData();\n    fetchPrediction();\n  }, []);\n\n  // Manual refresh button\n  const handleRefresh = () => {\n    fetchData();\n    fetchPrediction();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: \"Flood Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-container\",\n        children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Latest Sensor Readings\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 39\n            }, this), \"(Updated every 10 seconds)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Distance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 16\n            }, this), \" \", distance, \" cm\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Flow Rate:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 16\n            }, this), \" \", flowRate, \" L/m\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleRefresh,\n            children: \"Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Prediction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), prediction ? /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 'bold',\n              fontSize: '20px',\n              color: prediction === 'Flood Risk' ? '#e63946' : '#2a9d8f'\n            },\n            children: [prediction === 'Flood Risk' ? '⚠️ ' : '✅ ', \" \", prediction]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading prediction...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"zNV94jBIl5AFH+PsVgfwS7fvX5M=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","fetchSheetData","jsxDEV","_jsxDEV","register","Dashboard","_s","chartData","setChartData","prediction","setPrediction","distance","setDistance","flowRate","setFlowRate","fetchData","sheetData","console","log","length","validRows","filter","item","isNaN","parseFloat","labels","map","_","index","distanceData","flowrateData","newChartData","datasets","label","data","borderColor","tension","fetchPrediction","response","fetch","json","Prediction","Distance","FlowRate","error","handleRefresh","children","style","textAlign","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","fontWeight","fontSize","color","_c","$RefreshReg$"],"sources":["D:/Y3S2/CS Research II/FloodProject/1 Webpage/dashboard/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport fetchSheetData from './api/googleSheets';\r\nimport './Dashboard.css'; // Link to your CSS layout file\r\n\r\n// Register Chart.js modules\r\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nexport default function Dashboard() {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [prediction, setPrediction] = useState('');\r\n  const [distance, setDistance] = useState(0.0);\r\n  const [flowRate, setFlowRate] = useState(0.0);\r\n\r\n  // ✅ Fetch ALL readings from Google Sheets for the chart\r\n  const fetchData = async () => {\r\n    const sheetData = await fetchSheetData();\r\n    console.log(\"Raw sheet data:\", sheetData); // Debug\r\n\r\n    if (sheetData && sheetData.length) {\r\n      // Filter valid rows\r\n      const validRows = sheetData.filter(\r\n        (item) =>\r\n          item.length >= 2 &&\r\n          !isNaN(parseFloat(item[0])) && // Distance\r\n          !isNaN(parseFloat(item[1]))   // FlowRate\r\n      );\r\n\r\n      console.log(\"Filtered valid rows:\", validRows);\r\n\r\n      // X-axis as Reading numbers\r\n      const labels = validRows.map((_, index) => `Reading ${index + 1}`);\r\n      const distanceData = validRows.map((item) => parseFloat(item[0]));\r\n      const flowrateData = validRows.map((item) => parseFloat(item[1]));\r\n\r\n      const newChartData = {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Distance (m)',\r\n            data: distanceData,\r\n            borderColor: 'rgb(13, 96, 220)', // Blue\r\n            tension: 0.3,\r\n          },\r\n          {\r\n            label: 'Flowrate (m³/s)',\r\n            data: flowrateData,\r\n            borderColor: 'rgb(254, 137, 4)', // Orange\r\n            tension: 0.3,\r\n          },\r\n        ],\r\n      };\r\n\r\n      setChartData(newChartData);\r\n    } else {\r\n      console.log(\"No sheet data available.\");\r\n      setChartData(null);\r\n    }\r\n  };\r\n\r\n  // Fetch prediction from backend\r\n  const fetchPrediction = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:8000/predict');\r\n      const data = await response.json();\r\n      console.log(\"Prediction:\", data);\r\n      setPrediction(data.Prediction);\r\n      setDistance(data.Distance);\r\n      setFlowRate(data.FlowRate);\r\n    } catch (error) {\r\n      console.error('Error fetching prediction:', error);\r\n      setPrediction('Error fetching prediction');\r\n    }\r\n  };\r\n\r\n  // Fetch on mount\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchPrediction();\r\n  }, []);\r\n\r\n  // Manual refresh button\r\n  const handleRefresh = () => {\r\n    fetchData();\r\n    fetchPrediction();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: 'center', marginTop: '20px' }}>Flood Monitoring Dashboard</h2>\r\n\r\n      <div className=\"dashboard-container\">\r\n\r\n        {/* Left side - Graph */}\r\n        <div className=\"graph-container\">\r\n          {chartData ? <Line data={chartData} /> : <p>Loading data...</p>}\r\n        </div>\r\n\r\n        {/* Right side - Readings + Prediction */}\r\n        <div className=\"content-container\">\r\n\r\n          {/* Latest Sensor Readings */}\r\n          <div className=\"card\">\r\n            <h3>Latest Sensor Readings<br></br>(Updated every 10 seconds)</h3>\r\n            <p><strong>Distance:</strong> {distance} cm</p>\r\n            <p><strong>Flow Rate:</strong> {flowRate} L/m</p>\r\n            <button onClick={handleRefresh}>Refresh Data</button>\r\n          </div>\r\n\r\n          {/* Prediction Card */}\r\n          <div className=\"card\">\r\n            <h3>Prediction</h3>\r\n            {prediction ? (\r\n              <p style={{\r\n                fontWeight: 'bold',\r\n                fontSize: '20px',\r\n                color: prediction === 'Flood Risk' ? '#e63946' : '#2a9d8f'\r\n              }}>\r\n                {prediction === 'Flood Risk' ? '⚠️ ' : '✅ '} {prediction}\r\n              </p>\r\n            ) : (\r\n              <p>Loading prediction...</p>\r\n            )}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}